name: Rust
env:
  DEBUG: napi:*
  APP_NAME: compiler
  MACOSX_DEPLOYMENT_TARGET: '10.13'

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request: null

jobs:
  compiler-build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn packages/esfuse-compiler build
              strip -x packages/esfuse-compiler/*.node
    name: Compiler build - ${{matrix.settings.target}} - node@18
    runs-on: ${{matrix.settings.host}}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{!matrix.settings.docker}}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{!matrix.settings.docker}}
        with:
          toolchain: stable
          targets: ${{matrix.settings.target}}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/*/.cargo-cache
            packages/*/target/
          key: ${{matrix.settings.target}}-cargo-${{matrix.settings.host}}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{matrix.settings.target == 'armv7-unknown-linux-gnueabihf'}}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{matrix.settings.setup}}
        if: ${{matrix.settings.setup}}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{matrix.settings.docker}}
        with:
          image: ${{matrix.settings.docker}}
          options: '--user 0:0 -v ${{github.workspace}}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{github.workspace}}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{github.workspace}}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{github.workspace}}:/build -w /build'
          run: ${{matrix.settings.build}}
      - name: Build
        run: ${{matrix.settings.build}}
        if: ${{!matrix.settings.docker}}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{matrix.settings.target}}
          path: packages/esfuse-compiler/${{env.APP_NAME}}.*.node
          if-no-files-found: error

  compiler-test-macOS-windows-binding:
    name: Compiler test - ${{matrix.settings.target}} - node@${{matrix.node}}
    needs:
      - compiler-build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ${{matrix.settings.host}}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node}}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{matrix.settings.target}}
          path: packages/esfuse-compiler
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn packages/esfuse-compiler test

  compiler-publish:
    name: Compiler publish
    runs-on: ubuntu-latest
    environment: npm
    needs:
      - compiler-test-macOS-windows-binding
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn packages/esfuse-compiler artifacts
      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            yarn packages/esfuse-compiler npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            yarn packages/esfuse-compiler npm publish --access public --tag next
          else
            echo "Not a release, skipping publish"
          fi
        env:
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
